{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Create the Amazon EC2 instances for the Ansible Quick Start.",
	"Parameters": {
		"KeyPairName": {
			"Description": "Public/private key pair",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"SubnetId": {
			"Description": "VPC Subnet ID for EC2 Instances",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"VPC": {
			"Description": "VPC Id",
			"Type": "AWS::EC2::VPC::Id"
		},
		"RemoteAdminCIDR": {
			"Description": "CIDR Block or IP for SSH and RDP access",
			"Type": "String",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "[a-zA-Z0-9]+\\..+"
		},
		"AnsibleTowerIP": {
			"Description": "IP for the ansible master",
			"Type": "String",
			"Default": "172.31.0.10"
		},
        "AnsibleAdminPassword": {
            "Description" : "Password for Ansible Admin Must be at least 8 characters containing letters and (minimum 1 capital letter), numbers and symbols",
            "Type"        : "String",
            "MinLength"   : "8",
            "MaxLength"   : "32",
            "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho"         : "true"
        },
        "DatabaseAdminPassword": {
            "Description" : "Password for Ansible Admin Must be at least 8 characters containing letters and (minimum 1 capital letter), numbers and symbols",
            "Type"        : "String",
            "MinLength"   : "8",
            "MaxLength"   : "32",
            "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho"         : "true"
        },
		"AnsibleClientLinuxIP": {
			"Description": "IP for the ansible client",
			"Type": "String",
			"Default": "172.31.0.11"
		},
	"AnsibleTowerInstanceType": {
            "Description": "Amazon EC2 instance type for the Config Server",
            "Type": "String",
            "Default": "t2.medium",
            "AllowedValues": [
                "t2.medium",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge"
            ]
        },
        "LinuxClientInstanceType": {
            "Description": "Amazon EC2 instance type for the Linux nodes.",
            "Type": "String",
            "Default": "m3.medium",
            "AllowedValues": [
                "t2.micro",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge"
            ]
        },
		"VPCCIDR": {
			"Description": "CIDR Block for the VPC",
			"Type": "String",
			"Default": "172.31.0.0/16",
			"AllowedPattern": "[a-zA-Z0-9]+\\..+"
		}
	},
	"Mappings": {
		"RHEL7": {
			"us-east-1": {
				"64": "ami-2051294a"
			},
			"us-west-2": {
				"64": "ami-775e4f16"
			},
			"us-west-1": {
				"64": "ami-d1315fb1"
			},
			"eu-west-1": {
				"64": "ami-8b8c57f8"
			},
			"eu-central-1": {
				"64": "ami-875042eb"
			},
			"ap-southeast-1": {
				"64": "ami-3f03c55c"
			},
			"ap-northeast-1": {
				"64": "ami-0dd8f963"
			},
			"ap-northeast-2": {
				"64": "ami-44db152a"
			},
			"sa-east-1": {
				"64": "ami-27b3094b"
			},
			"ap-southeast-2": {
				"64": "ami-e0c19f83"
			}
		}
	},
	"Resources": {
		"AnsibleTower": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"packages": {
							"yum": {
								"curl": [],
								"wget": []
							}
						},
"files": {
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": ["", [
										"[main]\n",
										"stack=", {
											"Ref": "AWS::StackId"
										}, "\n",
										"region=", {
											"Ref": "AWS::Region"
										}, "\n"
									]]
								},
								"mode": "000400",
								"user": "root",
								"group": "root"
							},
							"/etc/qsadmin.conf": {
                                                                "content": {
                                                                        "Fn::Join": ["", [
    									"ansible_admin_password|",{ "Ref" : "AnsibleAdminPassword" }, "\n",
    									"ansible_dbadmin_password|",{ "Ref" : "DatabaseAdminPassword" }, "\n"
                                                                        ]]
                                                                },
                                                                "mode": "000400",
                                                                "user": "root",
                                                                "group": "root"
                                                        }
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"RHEL7", {
							"Ref": "AWS::Region"
						},
						"64"
					]
				},
				"InstanceType": {"Ref": "AnsibleTowerInstanceType"},
				"NetworkInterfaces": [{
					"DeleteOnTermination": "true",
					"DeviceIndex": 0,
					"SubnetId": {
						"Ref": "SubnetId"
					},
					"PrivateIpAddresses": [{
						"Primary": "true",
						"PrivateIpAddress": {
							"Ref": "AnsibleTowerIP"
						}
					}],
					"GroupSet": [{
						"Ref": "AnsibleTowerSecurityGroup"
					}]
				}],
				"Tags": [
					   {
					     "Key": "Name",
					     "Value": "AnsibleTower"
					   },
					   {    
                                             "Key": "Tower",
                                             "Value": "Managed"
                                           }
					
				        ],
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/xvdb",
					"Ebs": {
						"VolumeSize": "50",
						"VolumeType": "gp2"
					}
				}],
				"KeyName": {
					"Ref": "KeyPairName"
				},

				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash \n",
                                "hostnamectl set-hostname tower\n",
                                "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n",
                                "yum install -y python-setuptools\n",
                                "yum install -y python-daemon\n",
								"yum install -y pystache\n",
								"yum install -y python-ecdsa\n",
								"yum install -y python-paramiko\n",
								"yum install -y python-keyczar\n",
								"yum install -y python-crypto\n",
								"yum install -y python-httplib\n",
                                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
								"/opt/aws/bin/cfn-init ",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource AnsibleTower ",
								" --region ", { "Ref": "AWS::Region" }, 
								"\n",
								"/opt/aws/bin/cfn-signal", " -e $?", " '", { "Ref" : "WaitforCfnTools" },"'","\n",

								"SRC=https://s3.amazonaws.com/quickstart-reference/ansible/latest/scripts/ansibletower_userdata-el7.sh",
								"\n",
								"curl -L $SRC | bash;",
								"/opt/aws/bin/cfn-signal", " -e $?", " '", { "Ref" : "WaitforAnsibleTowerInstall" },"'","\n",
								"\n",
								"\n"
							]
						]
					}
				}
			}
		},
		"WaitforCfnTools": {
			"Type": "AWS::CloudFormation::WaitConditionHandle"
		},
		"CfnWaitCondition": {
			"Type": "AWS::CloudFormation::WaitCondition",
			"DependsOn": "AnsibleTower",
			"Properties": {
				"Handle": {
					"Ref": "WaitforCfnTools"
				},
				"Timeout": "1000"

			}
		},
		"WaitforAnsibleTowerInstall": {
			"Type": "AWS::CloudFormation::WaitConditionHandle"
		},
		"AnsibleTowerWaitCondition": {
			"Type": "AWS::CloudFormation::WaitCondition",
			"DependsOn": "AnsibleTower",
			"Properties": {
				"Handle": {
					"Ref": "WaitforAnsibleTowerInstall"
				},
				"Timeout": "1000"
			}
		},
		"LinuxClient": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "AnsibleTower",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"RHEL7", {
							"Ref": "AWS::Region"
						},
						"64"
					]
				},
				"InstanceType": {"Ref": "LinuxClientInstanceType"},
				"NetworkInterfaces": [{
					"DeleteOnTermination": "true",
					"DeviceIndex": 0,
					"SubnetId": {
						"Ref": "SubnetId"
					},
					"PrivateIpAddresses": [{
						"Primary": "true",
						"PrivateIpAddress": {
							"Ref": "AnsibleClientLinuxIP"
						}
					}],
					"GroupSet": [{
						"Ref": "AnsibleClientLinuxSecurityGroup"
					}]
				}],
				"Tags": [
					    {
						"Key": "Name",
						"Value": "AnsibleClient"
					    },{
                                                "Key": "Tower",
                                                "Value": "Managed"
                                            }
					],
				"KeyName": {
					"Ref": "KeyPairName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash\n",
								"date >/root/born_date",
								"\n"
							]
						]
					}
				}
			}
		},
		"AnsibleTowerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enables access to the Ansible tower",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "RemoteAdminCIDR"
					}
				},{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				},{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": {
						"Ref": "RemoteAdminCIDR"
					}
				},{
                                        "IpProtocol": "tcp",
                                        "FromPort": "8080",
                                        "ToPort": "8080",
                                        "CidrIp": {
                                                "Ref": "RemoteAdminCIDR"
                                        }
                                },{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": {
						"Ref": "RemoteAdminCIDR"
					}
				}]
			}
		},
		"AnsibleClientLinuxSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enables access to the ansible communication",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "RemoteAdminCIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}]
			}
		}
	},
	"Outputs": {
		"AnsibleTowerDnsName": {
			"Value": {
				"Fn::GetAtt": [
					"AnsibleTower",
					"PublicDnsName"
				]
			},
			"Description": "Public DNS Name for the Ansible Server"
		},
		"AnsibleClientLinuxDnsName": {
			"Value": {
				"Fn::GetAtt": [
					"LinuxClient",
					"PublicDnsName"
				]
			},
			"Description": "Public DNS Name for the Ansible Linux"
		}
	}
}
